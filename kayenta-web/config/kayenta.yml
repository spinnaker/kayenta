server:
  port: 8090

redis:
  connection: redis://localhost:6379

kayenta:
  atlas:
    enabled: false
#    stageTimeoutMinutes: 3
#    maxBackoffPeriodSeconds: 30
#    accounts:
#      - name:
#        endpoint:
#          baseUrl: http://localhost:7101
#        namespace:
#        supportedTypes:
#          - METRICS_STORE

  google:
    enabled: false
#    accounts:
#      - name:
#        project:
#        jsonPath:
#        bucket:
#        rootFolder: kayenta
#        supportedTypes:
#          - METRICS_STORE
#          - OBJECT_STORE
#          - CONFIGURATION_STORE

  azure:
    enabled: false
#    accounts:
#      - name:
#        storageAccountName:
#        accountAccessKey:
#        container:
#        rootFolder: kayenta
#        endpointSuffix: core.windows.net
#        supportedTypes:
#          - OBJECT_STORE
#          - CONFIGURATION_STORE

  aws:
    enabled: false
#    accounts:
#      - name:
#        bucket:
#        rootFolder: kayenta
#        You can set credentials that you supply explicitly (see: AwsManagedAccount.ExplicitAwsCredentials)
#        explicitCredentials:
#          accessKey: explicitAccessKey
#          secretKey: explicitSecretKey
#          sessionToken: explicitSessionToken (optional)
#        supportedTypes:
#          - OBJECT_STORE
#          - CONFIGURATION_STORE

  datadog:
    enabled: false
#    accounts:
#      - name: my-datadog-account
#        apiKey: xxxx
#        applicationKey: xxxx
#        supportedTypes:
#          - METRICS_STORE
#        endpoint.baseUrl: https://app.datadoghq.com

  graphite:
    enabled: false
#    accounts:
#      - name: my-graphite-account
#        endpoint:
#          baseUrl: http://localhost
#        supportedTypes:
#          - METRICS_STORE

  newrelic:
    enabled: false
#    accounts:
#    - name: my-newrelic-account
#      apiKey: xxxx
#      applicationKey: xxxx
#      defaultScopeKey: server_scope # Optional, if omitted every request must supply the _scope_key param in extended scope params
#      defaultLocationKey: server_region # Optional, if omitted requests must supply the _location_key if it is needed.
#      supportedTypes:
#        - METRICS_STORE
#      endpoint.baseUrl: https://insights-api.newrelic.com

  prometheus:
    enabled: false
#    accounts:
#      - name: my-prometheus-account
#        endpoint:
#          baseUrl: http://localhost:9090
#        supportedTypes:
#          - METRICS_STORE

  signalfx:
    enabled: true
#    accounts:
#      - name: sfx-integration-test-account
#        accessToken: ${kayenta.signalfx.apiKey} # The sfx api token
#        endpoint.baseUrl: https://stream.signalfx.com # Optional defaults to https://stream.signalfx.com
#        defaultScopeKey: server_scope # Optional, if omitted every request must supply the _scope_key param in extended scope params
#        defaultLocationKey: server_region # Optional, if omitted requests must supply the _location_key if it is needed.
#        supportedTypes:
#          - METRICS_STORE

  wavefront:
   enabled: false
#   accounts:
#      - name:
#        endpoint:
#          baseUrl:
#        apiToken:
#        supportedTypes:
#          - METRICS_STORE

  gcs:
    enabled: false

  blobs:
    enabled: false

  s3:
    enabled: false

  stackdriver:
    enabled: false

  memory:
    enabled: false

  configbin:
    enabled: false

  remoteJudge:
    enabled: false
#    endpoint:
#      baseUrl: http://remotejudge.example.com/path/to/service

# Retry configuration for metrics fetching from metrics storage (see: MetricsRetryConfigurationProperties)
  metrics:
    retry:
      series: SERVER_ERROR
      statuses: REQUEST_TIMEOUT, TOO_MANY_REQUESTS
      attempts: 10

management.endpoints.web.exposure.include: '*'
management.endpoint.health.show-details: always

keiko:
  queue:
    redis:
      queueName: kayenta.keiko.queue
      deadLetterQueueName: kayenta.keiko.queue.deadLetters

spectator:
  applicationName: ${spring.application.name}
  webEndpoint:
    enabled: true

swagger:
  enabled: true
  title: Kayenta API
  description:
  contact:
  patterns:
    - /admin.*
    - /canary.*
    - /canaryConfig.*
    - /canaryJudgeResult.*
    - /credentials.*
    - /fetch.*
    - /health
    - /judges.*
    - /metadata.*
    - /metricSetList.*
    - /metricSetPairList.*
    - /metricServices.*
    - /pipeline.*
    - /standalone.*
