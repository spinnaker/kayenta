/*
 * Copyright 2017 Google, Inc.
 * Copyright 2017 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id "io.spinnaker.project" version "$spinnakerGradleVersion" apply false
  id "nebula.kotlin" version "$kotlinVersion" apply false
  id 'idea'
}

subprojects { project ->
  group = "com.netflix.kayenta"
  apply plugin: "io.spinnaker.project"

  if (name != "kayenta-bom") {
    apply plugin: "java-library"
    apply plugin: "groovy"
    apply plugin: "nebula.kotlin"

    def localVersions = [orcaVersion].find { it.endsWith('-SNAPSHOT') }
    if (localVersions) {
      logger.info("Enabling mavenLocal repo for $localVersions")
      repositories {
        mavenLocal()
      }
    }

    test {
      testLogging {
        exceptionFormat = "full"
      }
      minHeapSize = "512m"
      maxHeapSize = "512m"
    }

    tasks.withType(JavaExec) {
      if (System.getProperty('DEBUG', 'false') == 'true') {
        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8191'
      }
    }

    configurations.all {
      exclude group: 'org.mortbay.jetty', module: 'servlet-api'
      exclude group: 'javax.servlet', module: 'servlet-api'
      exclude group: 'org.slf4j', module: 'slf4j-log4j12'
      exclude group: 'org.slf4j', module: 'slf4j-simple'
    }
  }

  project.extensions.findByName('license')?.with {
    exclude "**/*.json"
    exclude "**/*.md"
    exclude "**/*.sse"
    exclude "**/*.yml"
  }

  repositories {
    jcenter()
    maven { url "https://dl.bintray.com/spinnaker/spinnaker"}
  }

  if (name != "kayenta-bom") {
    dependencies {
      implementation platform("com.netflix.spinnaker.orca:orca-bom:$orcaVersion")
      compileOnly "org.projectlombok:lombok"
      annotationProcessor platform("com.netflix.spinnaker.orca:orca-bom:$orcaVersion")
      annotationProcessor "org.projectlombok:lombok"
      annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
      testAnnotationProcessor platform("com.netflix.spinnaker.orca:orca-bom:$orcaVersion")
      testAnnotationProcessor "org.projectlombok:lombok"
      testCompileOnly "org.projectlombok:lombok"


      api "org.slf4j:slf4j-api"
      api "org.springframework.boot:spring-boot-starter-web"
      api "com.netflix.spinnaker.kork:kork-swagger"
      api "com.netflix.spinnaker.orca:orca-core"

      api "com.squareup.retrofit:retrofit"
      api "com.squareup.retrofit:converter-jackson"
      api "com.squareup.okhttp:okhttp"
      api "com.squareup.okhttp:okhttp-urlconnection"
      api "com.squareup.okhttp:okhttp-apache"

      testImplementation "org.springframework.boot:spring-boot-starter-test"
      testImplementation "org.spockframework:spock-core"
      testImplementation "org.spockframework:spock-spring"
      testImplementation "org.springframework:spring-test"
      testImplementation "org.hamcrest:hamcrest-core"
      testImplementation "org.codehaus.groovy:groovy-all"
      testRuntimeOnly "cglib:cglib-nodep"
      testRuntimeOnly "org.objenesis:objenesis"
    }
  }
}

defaultTasks ":kayenta-web:run"
