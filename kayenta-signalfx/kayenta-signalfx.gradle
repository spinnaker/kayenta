buildscript {
  repositories {
    jcenter()
    maven { url "http://spinnaker.bintray.com/gradle" }
    maven { url "https://plugins.gradle.org/m2/" }
  }
  dependencies {
    // Apache 2.0, https://github.com/ozimov/embedded-redis#license
    classpath 'it.ozimov:embedded-redis:0.7.2'
  }
}

import redis.embedded.RedisServer

sourceSets {
  integrationTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/integration-test/java')
    }
    resources.srcDir file('src/integration-test/resources')
  }
}

configurations {
  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
}

def redisPort = getOpenPort()
def redisServer = new RedisServer(redisPort)

int getOpenPort() {
  ServerSocket socket
  try {
    socket = new ServerSocket(0)
    socket.setReuseAddress(true)
    def port = socket.getLocalPort()
    logger.lifecycle("Using port: ${port} for Redis")
    return port
  } catch (Exception e) {
    logger.lifecycle("Failed to find open port for Redis", e)
    if (socket != null) {
      socket.close()
    }
    throw new RuntimeException(e)
  }
}

//noinspection GroovyAssignabilityCheck
task startEmbeddedRedis() {
  group 'Application'
  description 'Starts an embedded Redis server on an open port.'

  doLast {
    redisServer.start()
  }
}

//noinspection GroovyAssignabilityCheck
task stopEmbeddedRedis() {
  group 'Application'
  description 'Stops the embedded Redis server.'

  doLast {
    redisServer.stop()
  }
}

//noinspection GroovyAssignabilityCheck
task integrationTest(type: Test) {
  systemProperty("redis.port", redisPort)
  systemProperty("kayenta.signalfx.apiKey", System.getProperty("kayenta.signalfx.apiKey"))
  systemProperty("spring.application.name", "kayenta")
  systemProperty('spring.config.name', "spinnaker,kayenta")
  systemProperty('spring.config.location', "file:${project.rootDir}/kayenta-signalfx/src/integration-test/resources/config/")
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.integrationTest.dependsOn 'startEmbeddedRedis'
tasks.integrationTest.finalizedBy 'stopEmbeddedRedis'

integrationTest {
  testLogging {
    showStandardStreams = true
  }
}

dependencies {
  compile project(":kayenta-core")

  compile spinnaker.dependency('bootWeb')
  compile spinnaker.dependency("korkSwagger")
  compile spinnaker.dependency('lombok')

  compile "com.netflix.spinnaker.orca:orca-core:$orcaVersion"

  compile group: 'com.signalfx.public', name: 'signalfx-java', version: '0.0.48'

  // Integration Test dependencies
  integrationTestCompile sourceSets.main.output
  integrationTestCompile configurations.testCompile
  integrationTestCompile sourceSets.test.output
  integrationTestRuntime configurations.testRuntime
  integrationTestCompile project(':kayenta-web')

  // Apache 2.0 https://github.com/rest-assured/rest-assured/blob/master/LICENSE
  integrationTestCompile 'io.rest-assured:rest-assured:3.1.1'
}

test {
  testLogging {
    events "passed", "skipped", "failed"
  }
}
